В данном API для целей аутентификации использутеся механизм "HMAC-SHA256":https://ru.wikipedia.org/wiki/HMAC.

----

h2. Подписывание запросов

Каждый запрос, требующий авторизации, должен содержать следующие HTTP заголовки:
* *Date*: текущая дата в формате *RFC-1123*.
* *Authentication*: ```hmac ${identity}:${nonce}:${digest}```, где:
** *identity* - *id*, полученный в ходе [[регистрации|Подтверждение-клиента#confirmed]].
** *nonce* - некоторое целое число, уникально идентифицирующее запрос на некотором дискретном временном промежутке (например 10 мин). Каждый новый запрос должен сопровождаться новым значением *nonce*
** *digest* - подпись сообщения, вычисляемая как ```base64encode(hmac("sha256", {secret}, {request.method} + {request.path} + {request.header.Date} + {nonce}))```. Тут *secret* – секретный ключ, расшаренный между клиентом и сервисом. Для *POST* запроса вида *“http://localhost:8080/api/client/mobile/1.0/orders”* вычислить digest можно следующим образом: ```base64encode(hmac("sha256", {secret}, "POST" + "/api/client/mobile/1.0/orders" + "Mon, 23 May 2016 16:39:39 +0600" + "114696735"))```.

Если авторизация неудачна, вернется ответ с кодом 401 Not Authorized.

----

h2. Пример

Данные, полученные в ходе регистрации:
* *id*: 1000007750818
* *key*: Jwtm8U6yV9JM3T/GfyUucUD7mRlZJbmLN0FaCrV7BIE=

Данные запроса:
* *method*: GET
* *path*: /api/client/mobile/1.0/history

Заголовки и их значения для включения в запрос:
```
Date: Tue, 24 Jan 2017 16:24:27 +0600
Authentication: hmac 1000007750818:737137758:J8DWmoscR3Z4+YbHvZ0D2Up/8Weh0IjXa26QVb0ihqA=
```

Данный пример можно использовать для проверки вашей реализации.

----

h2. См. также

* http://restcookbook.com/Basics/loggingin/
* https://tools.ietf.org/html/rfc2104

----

h2. Примеры реализации на разных платформах

h3. Пример на Java 1.8

В данном разделе приведен пример формирования заголовков *Date* и *Authentication* с использованием языка программирования Java (>=1.8). Приведенный фрагмент кода всего-лишь пример и не предназначен для использования в production решениях. Вы можете свободно использовать данный пример на свой страх и риск :)

```java

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.Charset;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

/**
 * Naive implementation of HMAC Signer.
 * Beware!: It is not thread safe!!!
 */
public class NaiveHmacSigner {

    private final Mac mac;
    private final String identity;
    private final SecureRandom rnd = new SecureRandom();

    public NaiveHmacSigner(String identity, Mac mac) {
        this.mac = mac;
        this.identity = identity;
    }

    private static final Charset UTF8 = Charset.forName("UTF-8");
    private static final DateTimeFormatter DATEFORMAT =
            DateTimeFormatter.RFC_1123_DATE_TIME;
    
    public Map<String, String> newSignature(String method, String uri) {

        final String dateHeaderValue = OffsetDateTime.now().format(DATEFORMAT);
        final String nonce = "" + Math.abs(this.rnd.nextInt());
        final String signData = method + uri + dateHeaderValue + nonce;

        this.mac.reset();
        final byte[] signBytes = this.mac.doFinal(signData.getBytes(UTF8));
        final String signBase64 = Base64.getEncoder().encodeToString(signBytes);
        final String authHeaderValue =
                String.format("hmac %s:%s:%s", this.identity, nonce, signBase64);

        final Map<String, String> result = new HashMap<>();
        result.put("Date", dateHeaderValue);
        result.put("Authentication", authHeaderValue);
        return result;
    }

    private static final  String HMAC_SHA256_KEYSPEC = "HmacSHA256";

    public static NaiveHmacSigner newSigner(String identity, byte[] secret)
            throws NoSuchAlgorithmException, InvalidKeyException {

        final Mac mac = Mac.getInstance(HMAC_SHA256_KEYSPEC);
        final SecretKeySpec spec = new SecretKeySpec(secret, HMAC_SHA256_KEYSPEC);
        mac.init(spec);
        return new NaiveHmacSigner(identity, mac);
    }
}

```

h3. Пример на Python

В данном разделе приведен пример формирования заголовков *Date* и *Authentication* с использованием языка программирования Python. 

```python
from datetime import datetime
import random
import hmac
import hashlib
import base64

MAXINT = 2**32
WEEKDAYS = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
          "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]


def now_rfc_1123():

    date = datetime.utcnow()
    weekday = WEEKDAYS[date.weekday()]
    month = MONTHS[date.month - 1]
    return "%s, %02d %s %04d %02d:%02d:%02d GMT" % \
           (weekday, date.day, month, date.year, 
            date.hour, date.minute, date.second)


class NaiveHmacSigner:

    def __init__(self, permanent_id, key):

        self.__id = str(permanent_id)
        self.__key = base64.standard_b64decode(key)

    def sign(self, *args):

        line = ''
        for entry in args:
            line = line + entry

        signature_bytes = \
            hmac.new(
                key=self.__key, 
                msg=line.encode('utf-8'), 
                digestmod=hashlib.sha256).digest()
        return base64.standard_b64encode(signature_bytes).decode()

    def new_signature(self, method, uri):

        rand_value = str(random.randint(0, MAXINT))
        date_value = now_rfc_1123()
        auth_value = "hmac %s:%s:%s" % \
                     (self.__id, rand_value, 
                      self.sign(method.upper(), uri, date_value, rand_value))

        return {
            u'Date': date_value,
            u'Authentication': auth_value
        }


c = NaiveHmacSigner(12312313, 'beKXDqRvkrbz+aQpEgn41SSh+9qtLAsb0r2cbcQ24cM=')
print(c.new_signature('GET', '/api/client/mobile/1.0/history'))

```

h3. Пример на PHP

```php
<?php

function hmac($algorithm, $secret, $data) {
  return hex2bin(hash_hmac($algorithm, $data, $secret));
}

class NaiveHmacSigner {

  private $identity;

  private $secret;

  public function __construct($id, $key) {
    $this->identity = $id;
    $this->secret = base64_decode($key);
  }

  public function newSignature($requestMethod, $requestPath) {

    $date = date(DATE_RFC1123);
    $nonce = time();

    $data = $requestMethod . $requestPath . $date . $nonce;

    $digest = base64_encode(hmac("sha256", $this->secret, $data));

    return array(
      "Authentication" => "hmac " . $this->identity . ":" . $nonce . ":" . $digest,
      "Date" => $date
    );
  }
}

$signer = new NaiveHmacSigner(12312313, "beKXDqRvkrbz+aQpEgn41SSh+9qtLAsb0r2cbcQ24cM=");
$signature = $signer->newSignature("GET", "/api/client/mobile/1.0/history");

print_r($signature);

?>
```